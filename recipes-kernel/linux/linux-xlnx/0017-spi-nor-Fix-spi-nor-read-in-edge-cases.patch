From 74eb246f950bd469f5e18e21c63f75888b4fb6ea Mon Sep 17 00:00:00 2001
From: Leon Leijssen <leon.leijssen@topic.nl>
Date: Fri, 14 Feb 2020 10:27:46 +0100
Subject: [PATCH 1/2] spi-nor Fix spi-nor read in edge cases

spi_nor_read handle odd read requests by doing an
additional small alignment read. This is already done
by spi_nor_write and solves an out of bounds write to
buf and a memcpy with overlapping regions

spi_nor_read For chips with multi die support the spi controller
has to split the read in chunks of 16MB. A multiply of 2 was missing in
the remaining page length calculation which resulted in data corruption.

spi_nor_write The remaining bank length used in case of addr_width 4 in
stacked configuration was missing a multiply which is there in the read code
---
 drivers/mtd/spi-nor/spi-nor.c | 164 ++++++++++++++++------------------
 1 file changed, 77 insertions(+), 87 deletions(-)

diff --git a/drivers/mtd/spi-nor/spi-nor.c b/drivers/mtd/spi-nor/spi-nor.c
index a352c9070a8f..3585f8ce0ff7 100644
--- a/drivers/mtd/spi-nor/spi-nor.c
+++ b/drivers/mtd/spi-nor/spi-nor.c
@@ -9,7 +9,6 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
-
 #include <linux/err.h>
 #include <linux/errno.h>
 #include <linux/module.h>
@@ -1712,35 +1711,39 @@ static const struct flash_info *spi_nor_read_id(struct spi_nor *nor)
 static int spi_nor_read(struct mtd_info *mtd, loff_t from, size_t len,
 			size_t *retlen, u_char *buf)
 {
+#define OFFSET_16_MB 0x1000000
 	struct spi_nor *nor = mtd_to_spi_nor(mtd);
 	int ret;
 	u32 offset = from;
 	u32 stack_shift = 0;
 	u32 read_len = 0;
 	u32 rem_bank_len = 0;
-	u8 bank;
-	u8 is_ofst_odd = 0;
-	loff_t addr = 0;
 	u8 cur_bank;
-	u8 nxt_bank;
+	u8 end_bank;
 	u32 bank_size;
-	u_char *ptr;
 
-#define OFFSET_16_MB 0x1000000
 
 	dev_dbg(nor->dev, "from 0x%08x, len %zd\n", (u32)from, len);
 
-	if ((nor->isparallel) && (offset & 1)) {
-		/* We can hit this case when we use file system like ubifs */
-		from = (loff_t)(from - 1);
-		len = (size_t)(len + 1);
-		is_ofst_odd = 1;
-		ptr = kmalloc(len, GFP_KERNEL);
-		if (!ptr)
-			return -ENOMEM;
+	/*
+	 * Cannot read from odd offset in parallel mode,
+	 * so read 2 bytes first
+	 */
+	if ((nor->isparallel) && (from & 1)) {
+		u8 two[2];
+		size_t local_retlen = 0;
 
-	} else {
-		ptr = buf;
+		ret = spi_nor_read(mtd, from & ~1, 2, &local_retlen, two);
+		if (ret < 0)
+			return ret;
+
+		WARN_ON(local_retlen != 2);
+		buf[0] = two[1];
+
+		*retlen += 1; /* We've read only one actual byte */
+		++buf;
+		--len;
+		++from;
 	}
 
 	ret = spi_nor_lock_and_prep(nor, SPI_NOR_OPS_READ);
@@ -1748,15 +1751,14 @@ static int spi_nor_read(struct mtd_info *mtd, loff_t from, size_t len,
 		return ret;
 
 	while (len) {
-		if (nor->addr_width == 3) {
-			bank = (u32)from / (OFFSET_16_MB << nor->shift);
-			rem_bank_len = ((OFFSET_16_MB << nor->shift) *
-							(bank + 1)) - from;
-		}
 		offset = from;
 
+		/* Size and length is the actual bytes to read (logical)
+		 * Addressing is physical */
 		if (nor->isparallel == 1)
+		{
 			offset /= 2;
+		}
 
 		if (nor->isstacked == 1) {
 			stack_shift = 1;
@@ -1768,53 +1770,39 @@ static int spi_nor_read(struct mtd_info *mtd, loff_t from, size_t len,
 			}
 		}
 
-		if (nor->addr_width == 4) {
-			/*
-			 * Some flash devices like N25Q512 have multiple dies
-			 * in it. Read operation in these devices is bounded
-			 * by its die segment. In a continuous read, across
-			 * multiple dies, when the last byte of the selected
-			 * die segment is read, the next byte read is the
-			 * first byte of the same die segment. This is Die
-			 * cross over issue. So to handle this issue, split
-			 * a read transaction, that spans across multiple
-			 * banks, into one read per bank. Bank size is 16MB
-			 * for single and dual stacked mode and 32MB for dual
-			 * parallel mode.
-			 */
-			if (nor->spi && nor->spi->multi_die) {
-				bank_size = (OFFSET_16_MB << nor->shift);
-				cur_bank = offset / bank_size;
-				nxt_bank = (offset + len) / bank_size;
-				if (cur_bank != nxt_bank)
-					rem_bank_len = (bank_size *
-							(cur_bank + 1)) -
-							offset;
-				else
-					rem_bank_len = (mtd->size >>
-							stack_shift) -
-							(offset << nor->shift);
-			} else {
-				rem_bank_len = (mtd->size >> stack_shift) -
+		/* Fix crossing boundaries for multi die chips & 3 bit addressing modes */
+		if ((nor->spi && nor->spi->multi_die) || nor->addr_width == 3) {
+			bank_size = (OFFSET_16_MB << nor->shift);
+			cur_bank = offset / bank_size;
+			end_bank = (offset + len) / bank_size;
+			if (cur_bank != end_bank)
+				rem_bank_len = ((bank_size *
+						(cur_bank + 1)) -
+						offset) << nor->shift;
+			else
+				rem_bank_len = (mtd->size >>
+						stack_shift) -
 						(offset << nor->shift);
-			}
 		}
-		if (nor->addr_width == 3)
-			write_ear(nor, offset);
-		if (len < rem_bank_len)
-			read_len = len;
 		else
-			read_len = rem_bank_len;
+			rem_bank_len = (mtd->size >> stack_shift) -
+					(offset << nor->shift);
+
+		if (nor->addr_width == 3)
+		{
+			ret = write_ear(nor, offset);
+			if (ret)
+				goto read_err;
+		}
+
+		read_len = min_t(size_t, len, rem_bank_len);
 
 		/* Wait till previous write/erase is done. */
 		ret = spi_nor_wait_till_ready(nor);
 		if (ret)
 			goto read_err;
 
-		if (nor->flags & SNOR_F_S3AN_ADDR_DEFAULT)
-			addr = spi_nor_s3an_addr_convert(nor, offset);
-		ret = nor->read(nor, offset, read_len, ptr);
-
+		ret = nor->read(nor, offset, read_len, buf);
 		if (ret == 0) {
 			/* We shouldn't see 0-length reads */
 			ret = -EIO;
@@ -1824,12 +1812,8 @@ static int spi_nor_read(struct mtd_info *mtd, loff_t from, size_t len,
 			goto read_err;
 
 		WARN_ON(ret > len);
-		if (is_ofst_odd == 1) {
-			memcpy(buf, (ptr + 1), (len - 1));
-			*retlen += (ret - 1);
-		} else {
-			*retlen += ret;
-		}
+
+		*retlen += ret;
 		buf += ret;
 		from += ret;
 		len -= ret;
@@ -1837,10 +1821,6 @@ static int spi_nor_read(struct mtd_info *mtd, loff_t from, size_t len,
 	ret = 0;
 
 read_err:
-
-	if (is_ofst_odd == 1)
-		kfree(ptr);
-
 	spi_nor_unlock_and_unprep(nor, SPI_NOR_OPS_READ);
 	return ret;
 }
@@ -1936,7 +1916,9 @@ static int spi_nor_write(struct mtd_info *mtd, loff_t to, size_t len,
 	size_t page_offset, page_remain, i;
 	ssize_t ret;
 	u32 offset, stack_shift=0;
-	u8 bank = 0;
+	u8 cur_bank;
+	u8 end_bank;
+	u32 bank_size = OFFSET_16_MB;
 	u32 rem_bank_len = 0;
 
 #define OFFSET_16_MB 0x1000000
@@ -1950,12 +1932,14 @@ static int spi_nor_write(struct mtd_info *mtd, loff_t to, size_t len,
 	if ((nor->isparallel) && (to & 1)) {
 
 		u8 two[2] = {0xff, buf[0]};
-		size_t local_retlen;
+		size_t local_retlen = 0;
 
 		ret = spi_nor_write(mtd, to & ~1, 2, &local_retlen, two);
 		if (ret < 0)
 			return ret;
 
+		WARN_ON(local_retlen != 2);
+
 		*retlen += 1; /* We've written only one actual byte */
 		++buf;
 		--len;
@@ -1967,18 +1951,13 @@ static int spi_nor_write(struct mtd_info *mtd, loff_t to, size_t len,
 		return ret;
 	for (i = 0; i < len; ) {
 		ssize_t written;
-		loff_t addr = to + i;
-
-		if (nor->addr_width == 3) {
-			bank = (u32)to / (OFFSET_16_MB << nor->shift);
-			rem_bank_len = ((OFFSET_16_MB << nor->shift) *
-							(bank + 1)) - to;
-		}
 
 		page_offset = ((to + i)) & (nor->page_size - 1);
 
 		offset = (to + i);
 
+		/* Size and length is the actual bytes to read (logical)
+		 * Addressing is physical */
 		if (nor->isparallel == 1)
 			offset /= 2;
 
@@ -1992,11 +1971,26 @@ static int spi_nor_write(struct mtd_info *mtd, loff_t to, size_t len,
 			}
 		}
 
-		/* Die cross over issue is not handled */
-		if (nor->addr_width == 4)
-			rem_bank_len = (mtd->size >> stack_shift) - offset;
+		cur_bank = offset / bank_size;
+		end_bank = (offset + len) / bank_size;
+		if (cur_bank != end_bank)
+		{
+			rem_bank_len = ((bank_size *
+					(cur_bank + 1)) -
+					offset) << nor->shift;
+		}
+		else
+			rem_bank_len = (mtd->size >>
+					stack_shift) -
+					(offset << nor->shift);
+
 		if (nor->addr_width == 3)
-			write_ear(nor, offset);
+		{
+			ret = write_ear(nor, offset);
+			if (ret)
+				goto write_err;
+		}
+
 		if (nor->isstacked == 1) {
 			if (len <= rem_bank_len) {
 				page_remain = min_t(size_t,
@@ -2016,11 +2010,7 @@ static int spi_nor_write(struct mtd_info *mtd, loff_t to, size_t len,
 		if (ret)
 			goto write_err;
 
-		if (nor->flags & SNOR_F_S3AN_ADDR_DEFAULT)
-			addr = spi_nor_s3an_addr_convert(nor, addr);
-
 		write_enable(nor);
-
 		ret = nor->write(nor, (offset), page_remain, buf + i);
 		if (ret < 0)
 			goto write_err;
-- 
2.17.1

